# -*- coding: utf-8 -*-
# Author: KanKer

# Spec file for build tokamak and TokaDemo.

import os
import specs

Import('env','gameenv')

tk_env = env.Clone()

pkgname = 'tokamak'
demoname = 'TokaDemo'

tk_dir = tk_env.Dir('.').srcnode().abspath

install_dir = os.path.join('#lib',tk_env['board'])
include_dir = os.path.join('#include',pkgname)

src_dir = 'tokamaksrc'

cpppath=[os.path.join(src_dir,'include'),os.path.join(src_dir,'src')]

srcs = Glob(os.path.join(src_dir,'src','*.cpp'))
if tk_env['TARGETOS'] == 'WIN32':
    tk_lib_srcs = []
    for src in srcs:
        if not 'linux' in src.name:
            tk_lib_srcs += [ src ]
    tk_lib_srcs += Glob(os.path.join(src_dir,'src','win32','*.cpp'))
    cpppath.append(os.path.join(src_dir,'src','win32'))
else:
    tk_lib_srcs = srcs

tk_env.Prepend(CPPPATH=cpppath)

objs=[]
for src in tk_lib_srcs:
    obj = tk_env.Object(src)
    objs.append(obj)

Depends(objs, tk_env['builddeps'])

tk_lib=tk_env.Library(pkgname, objs)

Depends(tk_lib, tk_env['linkdeps'])

ins_acts = []
tk_lib_incs = Glob(os.path.join(src_dir,'include','*.h'))
tk_lib_math_incs = Glob(os.path.join(src_dir,'include','math','*.h'))
ins_tk_lib_incs = tk_env.Install(include_dir,tk_lib_incs)
ins_tk_lib_math_incs = tk_env.Install(os.path.join(include_dir,'math'),tk_lib_math_incs)
Depends(ins_tk_lib_math_incs,ins_tk_lib_incs)

ins_tk_lib = tk_env.Install(install_dir, tk_lib)
Depends(ins_tk_lib, ins_tk_lib_math_incs)

specs.SetupLibEnv([gameenv,env], 'tokamak', linkdeps = tk_lib, LIBS = [pkgname],
                  CPPPATH = [os.path.join(tk_dir, src_dir, 'include')],
                  LIBPATH = [tk_env.Dir('.').abspath])


tk_env.Alias('deps_install', ins_tk_lib)

# install libs for vc
vc_libs = specs.InstallLibForVc(tk_env, ins_tk_lib)
tk_env.Alias('deps_install', vc_libs)

Return()
#not compile at this stage
demo_env = tk_env.Clone()
demo_srcs = Glob(os.path.join(src_dir,'TokaDemo','*.cpp'))
demo_env.PrependUnique(CPPPATH = [os.path.join(src_dir,'TokaDemo')])

specs.UseIrrlicht(demo_env)
specs.UseCommon(demo_env)

demo_env.AppendUnique (LIBS = ['tokamak'], LIBPATH = ['.'])

objs = []
for src in demo_srcs:
  obj=demo_env.Object(src)
  objs.append(obj)

Depends(objs, demo_env['builddeps'])

demo = demo_env.Program(demoname, objs)
Depends(demo,demo_env['linkdeps'])


